{
/*
	// Place your snippets for TypeScript React here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"react-native List Item": {
		"prefix": "rnli",
		"body": [
			"import React from 'react'",
			"import { View, Image, Text, StyleSheet, ViewStyle, ImageStyle, TextStyle } from 'react-native'",
			"",
			"export interface I${1:name}ListItemProps {",
			"\tid: string;",
			"\t$0",
			"}",
			"",
			"const ${1:name}ListItem: React.SFC<I${1:name}ListItemProps> = ({",
			"\tid",
			"}) => (",
			"\t<View style={styles.container}>",
			"\t\t<Text style={styles.text}>{id}</Text>",
			"\t</View>",
			")",
			"",
			"const styles = StyleSheet.create({",
			"\tcontainer:\t{",
			"",
			"\t} as ViewStyle,",
			"\ttext: {",
			"",
			"\t} as TextStyle",
			"})",
			"",
			"export default ${1:name}ListItem",
		]
	},
	"react-native List": {
		"prefix": "rnl",
		"body": [
			"import * as React from 'react'",
			"import { View, FlatList, StyleSheet, ViewStyle } from 'react-native'",
			"import { IFetchState, IFetchActions } from 'common-data/artifacts/hocs'",
			"import ${1:name}ListItem from '../${1:name}ListItem'",
			"",
			"export interface I${1:name}ListProps {",
			"\t${2:array}: Array<{",
			"\t\tid: string",
			"\t$0",
			"\t}>",
			"}",
			"",
			"const keyExtractor = ({ id }) => id",
			"const renderItem = ({item}) => <${1:name}ListItem {...item} />",
			"",
			"const ${1:name}List: React.SFC<IFetchActions & IFetchState & I${1:name}ListProps> = ({",
			"\tfetchState,",
			"\tfetchActions,",
			"\t${2:array}",
			"})\t=> (",
			"\t<View style={styles.container}>",
			"\t\t<FlatList",
			"\t\t\tdata={${2:array}}",
			"\t\t\tkeyExtractor={keyExtractor}",
			"\t\t\trenderItem={renderItem}",
			"\t\t\tonRefresh={fetchActions.refetch}",
			"\t\t\trefreshing={fetchState.activelyRefetching}",
			"\t\t/>",
			"\t</View>",
			")",
			"",
			"const styles = StyleSheet.create({",
			"\tcontainer: {",
			"",
			"\t} as ViewStyle",
			"})",
			"",
			"export default ${1:name}List"
		]
	}
}