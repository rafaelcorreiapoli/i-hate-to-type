{
/*
	// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"React Apollo Container": {
		"prefix": "rac",
		"body": [

		]
	},
	"react-apollo mutation hoc": {
		"prefix": "ramh",
		"body": [
			"import { graphql } from 'react-apollo'",
			"import ${1:mutationName} from '../mutations/${2:mutationFile}'",
			"import ${4:queryName} from '../queries/${5:queryFile}'",
			"import {",
			"\t${4:queryName}Query,",
			"\t${1:mutationName}Mutation as I${3:InterfaceName}Mutation,",
			"} from '../../../operation-result-types'",
			"",
			"export interface IWith${3:InterfaceName}OuterProps {",
			"\t",
			"}",
			"",
			"export interface IWith${3:InterfaceName}WrappedProps {",
			"\t${1:mutationName}: (id: string) => Promise<any>",
			"}",
			"",
			"export default graphql<I${3:InterfaceName}Mutation, IWith${3:InterfaceName}OuterProps, IWith${3:InterfaceName}WrappedProps>(${1:mutationName}, {",
			"\tprops: ({ mutate }) => ({",
			"\t\t${1:mutationName}: async id => {",
			"\t\t\tif (!mutate) return",
			"\t\t\ttry {",
			"\t\t\t\t/**",
			"\t\t\t\t * Commit mutation",
			"\t\t\t\t */",
			"\t\t\t\tconst result = await mutate({",
			"\t\t\t\t\tvariables: {",
			"\t\t\t\t\t\tinput: {",
			"\t\t\t\t\t\t\tid,",
			"\t\t\t\t\t\t\tclientMutationId: 'clientMutationId'",
			"\t\t\t\t\t\t}",
			"\t\t\t\t\t},",
			"\t\t\t\t\t/**",
			"\t\t\t\t\t * Update local cache",
			"\t\t\t\t\t */",
			"\t\t\t\t\tupdate: (store, { data: { ${1:mutationName} } }) => {",
			"\t\t\t\t\t\tconst data = store.readQuery<${4:queryName}Query>({ query: ${4:queryName} })",
			"\t\t\t\t\t\t//\tDo your magic",
			"\t\t\t\t\t\tstore.writeQuery({ query: ${4:queryName}, data })",
			"\t\t\t\t\t},",
			"\t\t\t\t})",
			"\t\t\t\t/**",
			"\t\t\t\t * Handle success",
			"\t\t\t\t */",
			"\t\t\t}",
			"\t\t\tcatch (err) {",
			"\t\t\t\t/**",
			"\t\t\t\t * Handle Error",
			"\t\t\t\t */",
			"\t\t\t}",
			"\t\t}",
			"\t}),",
			"})",
		]
	}
}